// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.graphsync.message.pb.Message', null, global);
goog.exportSymbol('proto.graphsync.message.pb.Message.Block', null, global);
goog.exportSymbol('proto.graphsync.message.pb.Message.Request', null, global);
goog.exportSymbol('proto.graphsync.message.pb.Message.Response', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graphsync.message.pb.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.graphsync.message.pb.Message.repeatedFields_, null);
};
goog.inherits(proto.graphsync.message.pb.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graphsync.message.pb.Message.displayName = 'proto.graphsync.message.pb.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graphsync.message.pb.Message.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.graphsync.message.pb.Message.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graphsync.message.pb.Message.Request.displayName = 'proto.graphsync.message.pb.Message.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graphsync.message.pb.Message.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.graphsync.message.pb.Message.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graphsync.message.pb.Message.Response.displayName = 'proto.graphsync.message.pb.Message.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graphsync.message.pb.Message.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.graphsync.message.pb.Message.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graphsync.message.pb.Message.Block.displayName = 'proto.graphsync.message.pb.Message.Block';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.graphsync.message.pb.Message.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graphsync.message.pb.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.graphsync.message.pb.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graphsync.message.pb.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphsync.message.pb.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    completerequestlist: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    requestsList: jspb.Message.toObjectList(msg.getRequestsList(),
    proto.graphsync.message.pb.Message.Request.toObject, includeInstance),
    responsesList: jspb.Message.toObjectList(msg.getResponsesList(),
    proto.graphsync.message.pb.Message.Response.toObject, includeInstance),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.graphsync.message.pb.Message.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graphsync.message.pb.Message}
 */
proto.graphsync.message.pb.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graphsync.message.pb.Message;
  return proto.graphsync.message.pb.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graphsync.message.pb.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graphsync.message.pb.Message}
 */
proto.graphsync.message.pb.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleterequestlist(value);
      break;
    case 2:
      var value = new proto.graphsync.message.pb.Message.Request;
      reader.readMessage(value,proto.graphsync.message.pb.Message.Request.deserializeBinaryFromReader);
      msg.addRequests(value);
      break;
    case 3:
      var value = new proto.graphsync.message.pb.Message.Response;
      reader.readMessage(value,proto.graphsync.message.pb.Message.Response.deserializeBinaryFromReader);
      msg.addResponses(value);
      break;
    case 4:
      var value = new proto.graphsync.message.pb.Message.Block;
      reader.readMessage(value,proto.graphsync.message.pb.Message.Block.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graphsync.message.pb.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graphsync.message.pb.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graphsync.message.pb.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphsync.message.pb.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompleterequestlist();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.graphsync.message.pb.Message.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.graphsync.message.pb.Message.Response.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.graphsync.message.pb.Message.Block.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graphsync.message.pb.Message.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.graphsync.message.pb.Message.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graphsync.message.pb.Message.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphsync.message.pb.Message.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    root: msg.getRoot_asB64(),
    selector: msg.getSelector_asB64(),
    extensionsMap: (f = msg.getExtensionsMap()) ? f.toObject(includeInstance, undefined) : [],
    priority: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cancel: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    update: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graphsync.message.pb.Message.Request}
 */
proto.graphsync.message.pb.Message.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graphsync.message.pb.Message.Request;
  return proto.graphsync.message.pb.Message.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graphsync.message.pb.Message.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graphsync.message.pb.Message.Request}
 */
proto.graphsync.message.pb.Message.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoot(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSelector(value);
      break;
    case 4:
      var value = msg.getExtensionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriority(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancel(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graphsync.message.pb.Message.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graphsync.message.pb.Message.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graphsync.message.pb.Message.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphsync.message.pb.Message.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSelector_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getExtensionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCancel();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getUpdate();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.graphsync.message.pb.Message.Request.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.graphsync.message.pb.Message.Request} returns this
 */
proto.graphsync.message.pb.Message.Request.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes root = 2;
 * @return {!(string|Uint8Array)}
 */
proto.graphsync.message.pb.Message.Request.prototype.getRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes root = 2;
 * This is a type-conversion wrapper around `getRoot()`
 * @return {string}
 */
proto.graphsync.message.pb.Message.Request.prototype.getRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoot()));
};


/**
 * optional bytes root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoot()`
 * @return {!Uint8Array}
 */
proto.graphsync.message.pb.Message.Request.prototype.getRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.graphsync.message.pb.Message.Request} returns this
 */
proto.graphsync.message.pb.Message.Request.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes selector = 3;
 * @return {!(string|Uint8Array)}
 */
proto.graphsync.message.pb.Message.Request.prototype.getSelector = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes selector = 3;
 * This is a type-conversion wrapper around `getSelector()`
 * @return {string}
 */
proto.graphsync.message.pb.Message.Request.prototype.getSelector_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSelector()));
};


/**
 * optional bytes selector = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSelector()`
 * @return {!Uint8Array}
 */
proto.graphsync.message.pb.Message.Request.prototype.getSelector_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSelector()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.graphsync.message.pb.Message.Request} returns this
 */
proto.graphsync.message.pb.Message.Request.prototype.setSelector = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * map<string, bytes> extensions = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.graphsync.message.pb.Message.Request.prototype.getExtensionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.graphsync.message.pb.Message.Request} returns this
 */
proto.graphsync.message.pb.Message.Request.prototype.clearExtensionsMap = function() {
  this.getExtensionsMap().clear();
  return this;};


/**
 * optional int32 priority = 5;
 * @return {number}
 */
proto.graphsync.message.pb.Message.Request.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.graphsync.message.pb.Message.Request} returns this
 */
proto.graphsync.message.pb.Message.Request.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool cancel = 6;
 * @return {boolean}
 */
proto.graphsync.message.pb.Message.Request.prototype.getCancel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.graphsync.message.pb.Message.Request} returns this
 */
proto.graphsync.message.pb.Message.Request.prototype.setCancel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool update = 7;
 * @return {boolean}
 */
proto.graphsync.message.pb.Message.Request.prototype.getUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.graphsync.message.pb.Message.Request} returns this
 */
proto.graphsync.message.pb.Message.Request.prototype.setUpdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graphsync.message.pb.Message.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.graphsync.message.pb.Message.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graphsync.message.pb.Message.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphsync.message.pb.Message.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    extensionsMap: (f = msg.getExtensionsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graphsync.message.pb.Message.Response}
 */
proto.graphsync.message.pb.Message.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graphsync.message.pb.Message.Response;
  return proto.graphsync.message.pb.Message.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graphsync.message.pb.Message.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graphsync.message.pb.Message.Response}
 */
proto.graphsync.message.pb.Message.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 3:
      var value = msg.getExtensionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graphsync.message.pb.Message.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graphsync.message.pb.Message.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graphsync.message.pb.Message.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphsync.message.pb.Message.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getExtensionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.graphsync.message.pb.Message.Response.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.graphsync.message.pb.Message.Response} returns this
 */
proto.graphsync.message.pb.Message.Response.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.graphsync.message.pb.Message.Response.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.graphsync.message.pb.Message.Response} returns this
 */
proto.graphsync.message.pb.Message.Response.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, bytes> extensions = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.graphsync.message.pb.Message.Response.prototype.getExtensionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.graphsync.message.pb.Message.Response} returns this
 */
proto.graphsync.message.pb.Message.Response.prototype.clearExtensionsMap = function() {
  this.getExtensionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graphsync.message.pb.Message.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.graphsync.message.pb.Message.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graphsync.message.pb.Message.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphsync.message.pb.Message.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: msg.getPrefix_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graphsync.message.pb.Message.Block}
 */
proto.graphsync.message.pb.Message.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graphsync.message.pb.Message.Block;
  return proto.graphsync.message.pb.Message.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graphsync.message.pb.Message.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graphsync.message.pb.Message.Block}
 */
proto.graphsync.message.pb.Message.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrefix(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graphsync.message.pb.Message.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graphsync.message.pb.Message.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graphsync.message.pb.Message.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphsync.message.pb.Message.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes prefix = 1;
 * @return {!(string|Uint8Array)}
 */
proto.graphsync.message.pb.Message.Block.prototype.getPrefix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes prefix = 1;
 * This is a type-conversion wrapper around `getPrefix()`
 * @return {string}
 */
proto.graphsync.message.pb.Message.Block.prototype.getPrefix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrefix()));
};


/**
 * optional bytes prefix = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrefix()`
 * @return {!Uint8Array}
 */
proto.graphsync.message.pb.Message.Block.prototype.getPrefix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrefix()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.graphsync.message.pb.Message.Block} returns this
 */
proto.graphsync.message.pb.Message.Block.prototype.setPrefix = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.graphsync.message.pb.Message.Block.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.graphsync.message.pb.Message.Block.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.graphsync.message.pb.Message.Block.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.graphsync.message.pb.Message.Block} returns this
 */
proto.graphsync.message.pb.Message.Block.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool completeRequestList = 1;
 * @return {boolean}
 */
proto.graphsync.message.pb.Message.prototype.getCompleterequestlist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.graphsync.message.pb.Message} returns this
 */
proto.graphsync.message.pb.Message.prototype.setCompleterequestlist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated Request requests = 2;
 * @return {!Array<!proto.graphsync.message.pb.Message.Request>}
 */
proto.graphsync.message.pb.Message.prototype.getRequestsList = function() {
  return /** @type{!Array<!proto.graphsync.message.pb.Message.Request>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graphsync.message.pb.Message.Request, 2));
};


/**
 * @param {!Array<!proto.graphsync.message.pb.Message.Request>} value
 * @return {!proto.graphsync.message.pb.Message} returns this
*/
proto.graphsync.message.pb.Message.prototype.setRequestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.graphsync.message.pb.Message.Request=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graphsync.message.pb.Message.Request}
 */
proto.graphsync.message.pb.Message.prototype.addRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.graphsync.message.pb.Message.Request, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graphsync.message.pb.Message} returns this
 */
proto.graphsync.message.pb.Message.prototype.clearRequestsList = function() {
  return this.setRequestsList([]);
};


/**
 * repeated Response responses = 3;
 * @return {!Array<!proto.graphsync.message.pb.Message.Response>}
 */
proto.graphsync.message.pb.Message.prototype.getResponsesList = function() {
  return /** @type{!Array<!proto.graphsync.message.pb.Message.Response>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graphsync.message.pb.Message.Response, 3));
};


/**
 * @param {!Array<!proto.graphsync.message.pb.Message.Response>} value
 * @return {!proto.graphsync.message.pb.Message} returns this
*/
proto.graphsync.message.pb.Message.prototype.setResponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.graphsync.message.pb.Message.Response=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graphsync.message.pb.Message.Response}
 */
proto.graphsync.message.pb.Message.prototype.addResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.graphsync.message.pb.Message.Response, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graphsync.message.pb.Message} returns this
 */
proto.graphsync.message.pb.Message.prototype.clearResponsesList = function() {
  return this.setResponsesList([]);
};


/**
 * repeated Block data = 4;
 * @return {!Array<!proto.graphsync.message.pb.Message.Block>}
 */
proto.graphsync.message.pb.Message.prototype.getDataList = function() {
  return /** @type{!Array<!proto.graphsync.message.pb.Message.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graphsync.message.pb.Message.Block, 4));
};


/**
 * @param {!Array<!proto.graphsync.message.pb.Message.Block>} value
 * @return {!proto.graphsync.message.pb.Message} returns this
*/
proto.graphsync.message.pb.Message.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.graphsync.message.pb.Message.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graphsync.message.pb.Message.Block}
 */
proto.graphsync.message.pb.Message.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.graphsync.message.pb.Message.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graphsync.message.pb.Message} returns this
 */
proto.graphsync.message.pb.Message.prototype.clearDataList = function() {
  return this.setDataList([]);
};


goog.object.extend(exports, proto.graphsync.message.pb);
